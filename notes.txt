Yarn:
yarn add <library>: adds library to dependencies that are needed for running the code (e.g. React)
yarn add <library> --dev: adds library to devdependencies that are needed during development / building (e.g. Babel)
Other dependency types here: https://yarnpkg.com/en/docs/dependency-types#toc-dev-dependencies

Basic webpack / babel setup:

Transpile es6 to es2015:
./node_modules/.bin/babel index.js -o ./bundle.js --presets=es2015

-> this creates ./bundle.js

If es2015 added in .babelrc:
./node_modules/.bin/babel index.js -o ./bundle.js

After adding 

"build": "./node_modules/.bin/babel ./index.js -o ./bundle.js"

to "scripts" in package.json, the build can be run with 

yarn build

To build webpack in bundle.js:
node_modules/.bin/webpack ./index.js -o ./bundle.js

After adding path etc to webpack.config.js we can just run
node_modules/.bin/webpack

To automate, we can make a webpack.config.js, see comments there

Now we can change the build in package.json to webpack, as webpack is now used to build and it already calls babel in it's config:
"build": "./node_modules/.bin/babel ./index.js -o ./bundle.js"
-> 
"build": "./node_modules/.bin/webpack"

After adding webpack-dev-server, we can change 
"start": "node ./index.js", -> this doesn't exist anymore as we moved it to "src", as we specify in webpack.config.js
to 
"start": "./node_modules/.bin/webpack-dev-server"

For bundling binary / static files, refer tocomments in webpack config
--------------------------------------------------------------------

React:

functional components vs class components:
functional comp are
- shorter
- easy to test (are normal functions)
- no state or lifecycle hooks

props:
- component parameters
- never modify! (inside component)
- any time of data (numbers, array, objects, functions...)
- in class components accessed with this.props
- in functional components passes as arguments

propTypes:
- prevent bugs in props
- logs errors to 
- comes in package 'prop-types'


dotenv:
yarn add dotenv --dev
.env file should not be comitted and holds local variables
for this project, create the .env file locally, content: API_URL=http://reactrecipes.herokuapp.com

Basscss: small functional css library, has many addons (basscss-btn etc)
PostCSS: transform style syntax to cross-browser compatible styles using js plugins, like babel does with JS
    CSSNext: PostCSS plugin to transplile modern CSS to "compatible" CSS (vendor prefixing, variables etc)

Linter: detects and flags errors or rules, rules can be user-created

Prettier: transforms code to match styleguide

Git hook: execute style guide and correctness on each commit

React router:
    - Browser router: component that uses html5 history API to keep UI in sync with URL
        - Route: render UI when location matches path